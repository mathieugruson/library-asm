nasm -f elf64 add.s -o add.o && nasm -f elf64 multiply.s -o multiply.o
ar rcs libasm.a add.o multiply.o
gcc main.c -L. -lasm -o main


// compile

nasm -f elf64 -o ft_strlen.o ft_strlen.s
    // -f elf64 https://fr.wikipedia.org/wiki/Executable_and_Linkable_Format
    // 
ld -o ft_strlen ft_strlen.o

// compile with main
nasm -f elf64 -o ft_strlen.o ft_strlen.s
gcc main.c ft_strcmp.o ft_strcpy.o ft_write.o ft_read.o ft_strdup.o -o main

// gdb
gdb ./program
layout asm
break _start
run
si // executer chaque etape du programme

p/c $register_name  (char)
p/d $register_name  (decimal)
x/s $register_name  (string)


https://web.cecs.pdx.edu/~apt/cs491/gdb.pdf
https://www.lacl.fr/tan/asm


// syscall

uname -a
Linux made-f0Ar8s1.clusters.42paris.fr 5.15.0-119-generic #129-Ubuntu SMP Fri Aug 2 19:25:20 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
x86_64
https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md
; https://android.googlesource.com/kernel/lk/+/dima/for-travis/include/errno.h
; https://www.tortall.net/projects/yasm/manual/html/objfmt-elf64.html


// asm 

%rdi, %rsi, %rdx, %rcx, %r8, and %r9 are used to pass the first six integer
or pointer parameters to called functions 
%rax is the return register 
push / pop pour mettre et retirer de la stack pour préserver une valeur entre l'appel à des fonctions
test rax, rax = cmp rax, 0